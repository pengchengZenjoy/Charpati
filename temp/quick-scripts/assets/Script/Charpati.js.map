{"version":3,"sources":["Charpati.js"],"names":["GameState","Idle","Touching","Moving","End","cc","Class","extends","Component","properties","plate","default","type","Sprite","tipLb","Label","flyDistance","resistance","onLoad","director","getCollisionManager","enabled","registerTouch","startPos","node","position","worldStartPos","parent","convertToWorldSpaceAR","getPosition","curState","string","update","dt","self","moveDistanceX","moveSpeedX","resistanceX","moveDistanceY","moveSpeedY","resistanceY","curPos","setPosition","x","y","platePos","distance","log","newPosX","Math","random","newPosY","retry","on","Node","EventType","TOUCH_START","event","touches","getTouches","touchLoc","getLocation","arPos","convertToNodeSpaceAR","touchStartPos","TOUCH_MOVE","date","Date","curMilliseconds","getMilliseconds","lastPosX","lastPosY","lastMilliseconds","moveTime","TOUCH_END","onCollisionEnter","other","name","onCollisionStay","onCollisionExit"],"mappings":";;;;;;AAAA,IAAIA,YAAY;AACdC,UAAM,CADQ;AAEdC,cAAU,CAFI;AAGdC,YAAQ,CAHM;AAIdC,SAAK;AAJS,CAAhB;;AAOAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,eAAO;AACHC,qBAAS,IADN;AAEHC,kBAAMP,GAAGQ;AAFN,SADC;AAKRC,eAAO;AACHH,qBAAS,IADN;AAEHC,kBAAMP,GAAGU;AAFN,SALC;AASRC,qBAAY,GATJ;AAURC,oBAAW;AAVH,KAHP;;AAgBL;AACAC,YAAQ,kBAAY;AACnBb,WAAGc,QAAH,CAAYC,mBAAZ,GAAkCC,OAAlC,GAA4C,IAA5C;AACG;AACA,aAAKC,aAAL;AACA,aAAKC,QAAL,GAAgB,KAAKC,IAAL,CAAUC,QAA1B;AACA,aAAKC,aAAL,GAAqB,KAAKF,IAAL,CAAUG,MAAV,CAAiBC,qBAAjB,CAAuC,KAAKJ,IAAL,CAAUK,WAAV,EAAvC,CAArB;AACA,aAAKC,QAAL,GAAgB9B,UAAUC,IAA1B;AACA,aAAKa,KAAL,CAAWiB,MAAX,GAAoB,OAApB;AACH,KAzBI;;AA2BL;AACAC,YAAQ,gBAAUC,EAAV,EAAc;AAClB,YAAIC,OAAO,IAAX;AACA,YAAGA,KAAKJ,QAAL,IAAiB9B,UAAUG,MAA9B,EACI;AACJ,YAAIgC,gBAAgBD,KAAKE,UAAL,GAAgBH,EAAhB,GAAmBC,KAAKG,WAAL,GAAiBJ,EAAjB,GAAoBA,EAApB,GAAuB,CAA9D;AACA,YAAIK,gBAAgBJ,KAAKK,UAAL,GAAgBN,EAAhB,GAAmBC,KAAKM,WAAL,GAAiBP,EAAjB,GAAoBA,EAApB,GAAuB,CAA9D;AACAC,aAAKE,UAAL,GAAkBF,KAAKE,UAAL,GAAkBF,KAAKG,WAAL,GAAiBJ,EAArD;AACAC,aAAKK,UAAL,GAAkBL,KAAKK,UAAL,GAAkBL,KAAKM,WAAL,GAAiBP,EAArD;AACA,YAAGK,gBAAe,CAAlB,EAAoB;AAChB,gBAAIG,SAASP,KAAKV,IAAL,CAAUK,WAAV,EAAb;AACAK,iBAAKV,IAAL,CAAUkB,WAAV,CAAsBD,OAAOE,CAAP,GAASR,aAA/B,EAA8CM,OAAOG,CAAP,GAASN,aAAvD;AACH,SAHD,MAGK;AACDJ,iBAAKJ,QAAL,GAAgB9B,UAAUI,GAA1B;AACA,gBAAIyC,WAAWX,KAAKxB,KAAL,CAAWc,IAAX,CAAgBK,WAAhB,EAAf;AACA,gBAAIY,SAASP,KAAKV,IAAL,CAAUK,WAAV,EAAb;AACA,gBAAIiB,WAAW,CAACD,SAASF,CAAT,GAAWF,OAAOE,CAAnB,KAAuBE,SAASF,CAAT,GAAWF,OAAOE,CAAzC,IAA8C,CAACE,SAASD,CAAT,GAAWH,OAAOG,CAAnB,KAAuBC,SAASD,CAAT,GAAWH,OAAOG,CAAzC,CAA7D;AACA,gBAAGE,WAAS,KAAG,EAAf,EAAkB;AACdzC,mBAAG0C,GAAH,CAAO,KAAP;AACAb,qBAAKpB,KAAL,CAAWiB,MAAX,GAAoB,KAApB;AACA,oBAAIiB,UAAU,MAAM,MAAIC,KAAKC,MAAL,EAAV,GAA0B,GAAxC;AACA,oBAAIC,UAAU,MAAM,MAAIF,KAAKC,MAAL,EAAV,GAA0B,GAAxC;AACAhB,qBAAKxB,KAAL,CAAWc,IAAX,CAAgBkB,WAAhB,CAA4BM,OAA5B,EAAqCG,OAArC;AACA,qBAAKC,KAAL;AACH,aAPD,MAOK;AACD/C,mBAAG0C,GAAH,CAAO,MAAP;AACAb,qBAAKpB,KAAL,CAAWiB,MAAX,GAAoB,MAApB;AACH;AACJ;AACJ,KAxDI;;AA0DLqB,WAAM,iBAAU;AACZ,aAAKtB,QAAL,GAAgB9B,UAAUC,IAA1B;AACA,aAAKuB,IAAL,CAAUkB,WAAV,CAAsB,KAAKnB,QAA3B;AACA,aAAKT,KAAL,CAAWiB,MAAX,GAAoB,OAApB;AACH,KA9DI;;AAgELT,mBAAc,yBAAU;AACpB,YAAIY,OAAO,IAAX;AACAA,aAAKV,IAAL,CAAU6B,EAAV,CAAahD,GAAGiD,IAAH,CAAQC,SAAR,CAAkBC,WAA/B,EAA4C,UAAUC,KAAV,EAAiB;AACzD,gBAAGvB,KAAKJ,QAAL,IAAiB9B,UAAUC,IAA9B,EACI;AACJ,gBAAIyD,UAAUD,MAAME,UAAN,EAAd;AACA,gBAAIC,WAAWF,QAAQ,CAAR,EAAWG,WAAX,EAAf;AACA,gBAAIC,QAAQ5B,KAAKV,IAAL,CAAUuC,oBAAV,CAA+BH,QAA/B,CAAZ;AACA,gBAAId,WAAWgB,MAAMnB,CAAN,GAAQmB,MAAMnB,CAAd,GAAkBmB,MAAMlB,CAAN,GAAQkB,MAAMlB,CAA/C;AACAvC,eAAG0C,GAAH,CAAO,cAAYD,QAAnB;AACA,gBAAGA,WAAW,KAAG,EAAjB,EAAoB;AAChBZ,qBAAK8B,aAAL,GAAqBJ,QAArB;AACA1B,qBAAKJ,QAAL,GAAgB9B,UAAUE,QAA1B;AACA,uBAAO,IAAP;AACH;AACJ,SAbD,EAaGgC,KAAKV,IAbR;AAcAU,aAAKV,IAAL,CAAU6B,EAAV,CAAahD,GAAGiD,IAAH,CAAQC,SAAR,CAAkBU,UAA/B,EAA2C,UAAUR,KAAV,EAAiB;AACxD,gBAAGvB,KAAKJ,QAAL,IAAiB9B,UAAUE,QAA9B,EACI;AACJ,gBAAIwD,UAAUD,MAAME,UAAN,EAAd;AACA,gBAAIC,WAAWF,QAAQ,CAAR,EAAWG,WAAX,EAAf;AACA,gBAAIf,WAAW,CAACc,SAASjB,CAAT,GAAWT,KAAKR,aAAL,CAAmBiB,CAA/B,KAAmCiB,SAASjB,CAAT,GAAWT,KAAKR,aAAL,CAAmBiB,CAAjE,IAAsE,CAACiB,SAAShB,CAAT,GAAWV,KAAKR,aAAL,CAAmBkB,CAA/B,KAAmCgB,SAAShB,CAAT,GAAWV,KAAKR,aAAL,CAAmBkB,CAAjE,CAArF;AACA,gBAAIsB,OAAO,IAAIC,IAAJ,EAAX;AACA,gBAAIC,kBAAkBF,KAAKG,eAAL,EAAtB;AACA,gBAAIrB,UAAUY,SAASjB,CAAT,GAAWT,KAAK8B,aAAL,CAAmBrB,CAA9B,GAAkCT,KAAKX,QAAL,CAAcoB,CAA9D;AACA,gBAAIQ,UAAUS,SAAShB,CAAT,GAAWV,KAAK8B,aAAL,CAAmBpB,CAA9B,GAAkCV,KAAKX,QAAL,CAAcqB,CAA9D;AACA,gBAAGE,WAAWZ,KAAKlB,WAAL,GAAiBkB,KAAKlB,WAApC,EAAgD;AAC5CkB,qBAAKV,IAAL,CAAUkB,WAAV,CAAsBM,OAAtB,EAA+BG,OAA/B;AACAjB,qBAAKoC,QAAL,GAAgBtB,OAAhB;AACAd,qBAAKqC,QAAL,GAAgBpB,OAAhB;AACAjB,qBAAKsC,gBAAL,GAAwBJ,eAAxB;AACH,aALD,MAKK;AACD,oBAAIK,WAAW,CAACL,kBAAkBlC,KAAKsC,gBAAxB,IAA0C,IAAzD;AACAtC,qBAAKC,aAAL,GAAqBa,UAAUd,KAAKoC,QAApC;AACApC,qBAAKI,aAAL,GAAqBa,UAAUjB,KAAKqC,QAApC;AACArC,qBAAKE,UAAL,GAAkBF,KAAKC,aAAL,GAAmBsC,QAAnB,GAA4B,CAA9C;AACAvC,qBAAKK,UAAL,GAAkBL,KAAKI,aAAL,GAAmBmC,QAAnB,GAA4B,CAA9C;AACAvC,qBAAKG,WAAL,GAAmBH,KAAKjB,UAAL,GAAgBiB,KAAKE,UAArB,GAAgCF,KAAKK,UAAxD;AACAL,qBAAKM,WAAL,GAAmBN,KAAKjB,UAAxB;AACAiB,qBAAKJ,QAAL,GAAgB9B,UAAUG,MAA1B;AACAE,mBAAG0C,GAAH,CAAO,wBAAsBb,KAAKC,aAAlC;AACA9B,mBAAG0C,GAAH,CAAO,wBAAsBb,KAAKI,aAAlC;AACAjC,mBAAG0C,GAAH,CAAO,kCAAP;AACH;AACJ,SA5BD,EA4BGb,KAAKV,IA5BR;AA6BAU,aAAKV,IAAL,CAAU6B,EAAV,CAAahD,GAAGiD,IAAH,CAAQC,SAAR,CAAkBmB,SAA/B,EAA0C,UAAUjB,KAAV,EAAiB;AACvD,gBAAGvB,KAAKJ,QAAL,IAAiB9B,UAAUE,QAA9B,EACI;AACJgC,iBAAKV,IAAL,CAAUkB,WAAV,CAAsBR,KAAKX,QAA3B;AACAW,iBAAKJ,QAAL,GAAgB9B,UAAUC,IAA1B;AACH,SALD,EAKGiC,KAAKV,IALR;AAMH,KAnHI;;AAqHLmD,sBAAkB,0BAAUC,KAAV,EAAiB;AAC/BvE,WAAG0C,GAAH,CAAO,2BAAyB6B,MAAMpD,IAAN,CAAWqD,IAA3C;AACH,KAvHI;;AAyHLC,qBAAiB,yBAAUF,KAAV,EAAiB;AAC9B;AACH,KA3HI;;AA6HLG,qBAAiB,2BAAY,CAC5B;AA9HI,CAAT","file":"Charpati.js","sourceRoot":"../../../../assets/Script","sourcesContent":["var GameState = {\n  Idle: 1,\n  Touching: 2,\n  Moving: 3,\n  End: 4,\n};\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        plate: {\n            default: null,\n            type: cc.Sprite,\n        },\n        tipLb: {\n            default: null,\n            type: cc.Label\n        },\n        flyDistance:200,\n        resistance:100,\n    },\n\n    // use this for initialization\n    onLoad: function () {\n    \tcc.director.getCollisionManager().enabled = true;\n       \t//cc.director.getCollisionManager().enabledDebugDraw = true;\n       \tthis.registerTouch();\n        this.startPos = this.node.position\n        this.worldStartPos = this.node.parent.convertToWorldSpaceAR(this.node.getPosition());\n        this.curState = GameState.Idle\n        this.tipLb.string = \"Start\"\n    },\n\n    // called every frame\n    update: function (dt) {\n        var self = this\n        if(self.curState != GameState.Moving)\n            return\n        var moveDistanceX = self.moveSpeedX*dt-self.resistanceX*dt*dt/2\n        var moveDistanceY = self.moveSpeedY*dt-self.resistanceY*dt*dt/2\n        self.moveSpeedX = self.moveSpeedX - self.resistanceX*dt\n        self.moveSpeedY = self.moveSpeedY - self.resistanceY*dt\n        if(moveDistanceY >0){\n            var curPos = self.node.getPosition()\n            self.node.setPosition(curPos.x+moveDistanceX, curPos.y+moveDistanceY)\n        }else{\n            self.curState = GameState.End\n            var platePos = self.plate.node.getPosition()\n            var curPos = self.node.getPosition()\n            var distance = (platePos.x-curPos.x)*(platePos.x-curPos.x) + (platePos.y-curPos.y)*(platePos.y-curPos.y)\n            if(distance<75*75){\n                cc.log(\"WIN\")\n                self.tipLb.string = \"WIN\"\n                var newPosX = 100 + 440*Math.random() - 320\n                var newPosY = 500 + 500*Math.random() - 568\n                self.plate.node.setPosition(newPosX, newPosY)\n                this.retry()\n            }else{\n                cc.log(\"LOSE\")\n                self.tipLb.string = \"LOSE\"\n            }\n        }\n    },\n\n    retry:function(){\n        this.curState = GameState.Idle\n        this.node.setPosition(this.startPos)\n        this.tipLb.string = \"Start\"\n    },\n\n    registerTouch:function(){\n        var self = this;\n        self.node.on(cc.Node.EventType.TOUCH_START, function (event) {\n            if(self.curState != GameState.Idle)\n                return\n            var touches = event.getTouches();\n            var touchLoc = touches[0].getLocation();\n            var arPos = self.node.convertToNodeSpaceAR(touchLoc);\n            var distance = arPos.x*arPos.x + arPos.y*arPos.y;\n            cc.log(\"distance=\"+distance)\n            if(distance < 75*75){\n                self.touchStartPos = touchLoc\n                self.curState = GameState.Touching\n                return true\n            }\n        }, self.node);\n        self.node.on(cc.Node.EventType.TOUCH_MOVE, function (event) {\n            if(self.curState != GameState.Touching)\n                return\n            var touches = event.getTouches();\n            var touchLoc = touches[0].getLocation()\n            var distance = (touchLoc.x-self.worldStartPos.x)*(touchLoc.x-self.worldStartPos.x) + (touchLoc.y-self.worldStartPos.y)*(touchLoc.y-self.worldStartPos.y)\n            var date = new Date()\n            var curMilliseconds = date.getMilliseconds()\n            var newPosX = touchLoc.x-self.touchStartPos.x + self.startPos.x\n            var newPosY = touchLoc.y-self.touchStartPos.y + self.startPos.y\n            if(distance < self.flyDistance*self.flyDistance){\n                self.node.setPosition(newPosX, newPosY)\n                self.lastPosX = newPosX\n                self.lastPosY = newPosY\n                self.lastMilliseconds = curMilliseconds\n            }else{\n                var moveTime = (curMilliseconds - self.lastMilliseconds)/1000\n                self.moveDistanceX = newPosX - self.lastPosX\n                self.moveDistanceY = newPosY - self.lastPosY\n                self.moveSpeedX = self.moveDistanceX/moveTime/5\n                self.moveSpeedY = self.moveDistanceY/moveTime/5\n                self.resistanceX = self.resistance*self.moveSpeedX/self.moveSpeedY\n                self.resistanceY = self.resistance\n                self.curState = GameState.Moving\n                cc.log(\"self.moveDistanceX=\"+self.moveDistanceX)\n                cc.log(\"self.moveDistanceY=\"+self.moveDistanceY)\n                cc.log(\"self.curState = GameState.Moving\")\n            }\n        }, self.node);\n        self.node.on(cc.Node.EventType.TOUCH_END, function (event) {\n            if(self.curState != GameState.Touching)\n                return\n            self.node.setPosition(self.startPos)\n            self.curState = GameState.Idle\n        }, self.node);\n    },\n\n    onCollisionEnter: function (other) {\n        cc.log(\"fire onCollisionEnter \"+other.node.name);\n    },\n\n    onCollisionStay: function (other) {\n        // console.log('on collision stay');\n    },\n\n    onCollisionExit: function () {\n    }\n});\n"]}