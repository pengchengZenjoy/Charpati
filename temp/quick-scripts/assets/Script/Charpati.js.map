{"version":3,"sources":["Charpati.js"],"names":["GameState","Idle","Touching","Moving","End","cc","Class","extends","Component","properties","flyDistance","resistance","onLoad","director","getCollisionManager","enabled","registerTouch","startPos","node","position","worldStartPos","parent","convertToWorldSpaceAR","getPosition","curState","update","dt","self","moveDistanceX","moveSpeedX","resistanceX","moveDistanceY","moveSpeedY","resistanceY","curPos","setPosition","x","y","retry","on","Node","EventType","TOUCH_START","event","touches","getTouches","touchLoc","getLocation","arPos","convertToNodeSpaceAR","distance","log","touchStartPos","TOUCH_MOVE","date","Date","curMilliseconds","getMilliseconds","newPosX","newPosY","lastPosX","lastPosY","lastMilliseconds","moveTime","Math","abs","TOUCH_END","onCollisionEnter","other","name","onCollisionStay","onCollisionExit"],"mappings":"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","file":"Charpati.js","sourceRoot":"../../../../assets/Script","sourcesContent":["var GameState = {\n  Idle: 1,\n  Touching: 2,\n  Moving: 3,\n  End: 4,\n};\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        flyDistance:200,\n        resistance:100,\n    },\n\n    // use this for initialization\n    onLoad: function () {\n    \tcc.director.getCollisionManager().enabled = true;\n       \t//cc.director.getCollisionManager().enabledDebugDraw = true;\n       \tthis.registerTouch();\n        this.startPos = this.node.position\n        this.worldStartPos = this.node.parent.convertToWorldSpaceAR(this.node.getPosition());\n        this.curState = GameState.Idle\n    },\n\n    // called every frame\n    update: function (dt) {\n        var self = this\n        if(self.curState != GameState.Moving)\n            return\n        var moveDistanceX = self.moveSpeedX*dt-self.resistanceX*dt*dt/2\n        var moveDistanceY = self.moveSpeedY*dt-self.resistanceY*dt*dt/2\n        self.moveSpeedX = self.moveSpeedX - self.resistanceX*dt\n        self.moveSpeedY = self.moveSpeedY - self.resistanceY*dt\n        if(moveDistanceY >0){\n            var curPos = self.node.getPosition()\n            self.node.setPosition(curPos.x+moveDistanceX, curPos.y+moveDistanceY)\n        }else{\n            self.curState = GameState.End\n        }\n    },\n\n    retry:function(){\n        this.curState = GameState.Idle\n        this.node.setPosition(this.startPos)\n    },\n\n    registerTouch:function(){\n        var self = this;\n        self.node.on(cc.Node.EventType.TOUCH_START, function (event) {\n            if(self.curState != GameState.Idle)\n                return\n            var touches = event.getTouches();\n            var touchLoc = touches[0].getLocation();\n            var arPos = self.node.convertToNodeSpaceAR(touchLoc);\n            var distance = arPos.x*arPos.x + arPos.y*arPos.y;\n            cc.log(\"distance=\"+distance)\n            if(distance < 75*75){\n                self.touchStartPos = touchLoc\n                self.curState = GameState.Touching\n                return true\n            }\n        }, self.node);\n        self.node.on(cc.Node.EventType.TOUCH_MOVE, function (event) {\n            if(self.curState != GameState.Touching)\n                return\n            var touches = event.getTouches();\n            var touchLoc = touches[0].getLocation()\n            var distance = (touchLoc.x-self.worldStartPos.x)*(touchLoc.x-self.worldStartPos.x) + (touchLoc.y-self.worldStartPos.y)*(touchLoc.y-self.worldStartPos.y)\n            var date = new Date()\n            var curMilliseconds = date.getMilliseconds()\n            var newPosX = touchLoc.x-self.touchStartPos.x + self.startPos.x\n            var newPosY = touchLoc.y-self.touchStartPos.y + self.startPos.y\n            if(distance < self.flyDistance*self.flyDistance){\n                self.node.setPosition(newPosX, newPosY)\n                self.lastPosX = newPosX\n                self.lastPosY = newPosY\n                self.lastMilliseconds = curMilliseconds\n            }else{\n                var moveTime = (curMilliseconds - self.lastMilliseconds)/1000\n                self.moveDistanceX = newPosX - self.lastPosX\n                self.moveDistanceY = newPosY - self.lastPosY\n                self.moveSpeedX = self.moveDistanceX/moveTime/5\n                self.moveSpeedY = self.moveDistanceY/moveTime/5\n                self.resistanceX = self.resistance*self.moveSpeedX/self.moveSpeedY\n                self.resistanceY = Math.abs(self.resistance*self.moveSpeedY/self.moveSpeedX)\n                self.curState = GameState.Moving\n                cc.log(\"self.moveDistanceX=\"+self.moveDistanceX)\n                cc.log(\"self.moveDistanceY=\"+self.moveDistanceY)\n                cc.log(\"self.curState = GameState.Moving\")\n            }\n        }, self.node);\n        self.node.on(cc.Node.EventType.TOUCH_END, function (event) {\n            if(self.curState != GameState.Touching)\n                return\n            self.node.setPosition(self.startPos)\n            self.curState = GameState.Idle\n        }, self.node);\n    },\n\n    onCollisionEnter: function (other) {\n        cc.log(\"fire onCollisionEnter \"+other.node.name);\n    },\n\n    onCollisionStay: function (other) {\n        // console.log('on collision stay');\n    },\n\n    onCollisionExit: function () {\n    }\n});\n"]}